{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ]
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:prettier/recommended",
        "plugin:rxjs/recommended",
        "plugin:jsx-a11y/recommended"
      ],
      "plugins": [
        "rxjs-angular",
        "@stylistic"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "lib",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "lib",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": [
              "Page",
              "Component"
            ]
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "signature",
              "call-signature",
              "private-decorated-field",
              "protected-decorated-field",
              "public-decorated-field",
              "decorated-field",
              "private-decorated-get",
              "protected-decorated-get",
              "public-decorated-get",
              "decorated-get",
              "private-decorated-set",
              "protected-decorated-set",
              "public-decorated-set",
              "decorated-set",
              "private-decorated-method",
              "protected-decorated-method",
              "public-decorated-method",
              "decorated-method",
              "private-static-field",
              "private-instance-field",
              "private-field",
              "protected-static-field",
              "protected-instance-field",
              "protected-abstract-field",
              "protected-field",
              "public-static-field",
              "public-instance-field",
              "public-abstract-field",
              "public-field",
              "static-field",
              "instance-field",
              "abstract-field",
              "field",
              "static-initialization",
              "private-static-get",
              "private-static-set",
              "private-static-method",
              "private-instance-get",
              "private-instance-set",
              "private-get",
              "private-set",
              "private-constructor",
              "protected-constructor",
              "protected-static-get",
              "protected-static-set",
              "protected-static-method",
              "protected-instance-get",
              "protected-instance-set",
              "protected-instance-method",
              "protected-abstract-get",
              "protected-abstract-set",
              "protected-abstract-method",
              "protected-get",
              "protected-set",
              "protected-method",
              "public-static-get",
              "public-abstract-get",
              "static-get",
              "abstract-get",
              "public-static-set",
              "public-abstract-set",
              "static-set",
              "abstract-set",
              "public-static-method",
              "public-abstract-method",
              "static-method",
              "abstract-method",
              "public-constructor",
              "constructor",
              "public-instance-get",
              "public-get",
              "instance-get",
              "get",
              "public-instance-set",
              "public-set",
              "instance-set",
              "set",
              "private-instance-method",
              "private-method",
              "public-instance-method",
              "public-method",
              "instance-method",
              "method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["strictCamelCase"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "format": ["strictCamelCase"]
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "format": [
              "camelCase",
              "UPPER_CASE"
            ]
          },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": "function",
            "format": ["strictCamelCase"]
          },
          {
            "selector": "memberLike",
            "modifiers": ["private"],
            "format": ["strictCamelCase"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": "method",
            "format": ["camelCase"]
          },
          {
            "selector": "typeLike",
            "format": ["StrictPascalCase"]
          },
          {
            "selector": "typeAlias",
            "format": ["StrictPascalCase"],
            "custom": {
              "regex": "^Type",
              "match": false
            }
          },
          {
            "selector": "typeParameter",
            "format": ["PascalCase"],
            "prefix": ["T"]
          },
          {
            "selector": "interface",
            "format": null,
            "custom": {
              "regex": "^I[A-Z]",
              "match": false
            }
          },
          {
            "selector": "property",
            "format": ["strictCamelCase"]
          },
          {
            "selector": "property",
            "modifiers": ["readonly"],
            "format": [
              "camelCase",
              "UPPER_CASE"
            ]
          },
          {
            "selector": "classProperty",
            "format": ["camelCase"]
          },
          {
            "selector": "objectLiteralProperty",
            "format": null
          },
          {
            "selector": "typeProperty",
            "format": [
              "camelCase",
              "snake_case"
            ]
          }
        ],
        "no-await-in-loop": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "warn",
              "error"
            ]
          }
        ],
        "no-duplicate-imports": "error",
        "no-else-return": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "no-eval": "error",
        "no-implicit-coercion": [
          "error",
          {
            "disallowTemplateShorthand": true
          }
        ],
        "@typescript-eslint/no-inferrable-types": [
          "error",
          {
            "ignoreParameters": true,
            "ignoreProperties": true
          }
        ],
        "no-iterator": "error",
        "no-lonely-if": "error",
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": "error",
        "no-multi-assign": "error",
        "no-negated-condition": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-object-constructor": "error",
        "no-param-reassign": [
          "error",
          {
            "props": true
          }
        ],
        "no-plusplus": [
          "error",
          {
            "allowForLoopAfterthoughts": true
          }
        ],
        "no-promise-executor-return": "error",
        "no-template-curly-in-string": "error",
        "no-underscore-dangle": [
          "error",
          {
            "enforceInMethodNames": true,
            "enforceInClassFields": true,
            "allowInArrayDestructuring": false,
            "allowInObjectDestructuring": false,
            "allowFunctionParams": false
          }
        ],
        "no-unneeded-ternary": [
          "warn",
          {
            "defaultAssignment": false
          }
        ],
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-private-class-members": "error",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": "error",
        "no-var": "error",
        "@typescript-eslint/no-floating-promises": [
          "error",
          {
            "ignoreVoid": false
          }
        ],
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "prefer-arrow-callback": [
          "error",
          {
            "allowUnboundThis": false
          }
        ],
        "prefer-const": "error",
        "prefer-destructuring": [
          "error",
          {
            "object": true,
            "array": false
          }
        ],
        "prefer-object-spread": "error",
        "prefer-promise-reject-errors": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "@typescript-eslint/prefer-nullish-coalescing": [
          "warn",
          {
            "ignoreTernaryTests": true,
            "ignoreConditionalTests": true,
            "ignorePrimitives": {
              "string": true
            }
          }
        ],
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-readonly": "error",
        "@angular-eslint/prefer-output-readonly": "error",
        "rxjs-angular/prefer-async-pipe": "warn",
        "rxjs-angular/prefer-composition": [
          "error",
          {
            "checkDecorators": [
              "Service",
              "Directive",
              "Pipe"
            ]
          }
        ],
        "rxjs-angular/prefer-takeuntil": [
          "warn",
          {
            "alias": ["untilDestroyed"],
            "checkComplete": true,
            "checkDecorators": ["Component"],
            "checkDestroy": true
          }
        ],
        "rxjs/finnish": [
          "error",
          {
              "functions": true,
              "methods": false,
              "names": {
                  "^(canActivate|canActivateChild|canDeactivate|canLoad|intercept|resolve|validate)$": false
              },
              "parameters": false,
              "properties": true,
              "strict": false,
              "types": {
                  "^EventEmitter$": false
              },
              "variables": true
          }
        ],
        "rxjs/no-compat": "error",
        "rxjs/no-connectable": "error",
        "rxjs/no-cyclic-action": [
          "error",
          { "observable": "[Aa]ction(s|s\\$|\\$)$" }
        ],
        "rxjs/no-explicit-generics": "error",
        "rxjs/no-exposed-subjects": [
          "error",
          { "allowProtected": true }
        ],
        "rxjs/no-ignored-error": "warn",
        "rxjs/no-ignored-observable": "error",
        "rxjs/no-ignored-subscription": "warn",
        "rxjs/no-subclass": "error",
        "rxjs/no-subject-value": "error",
        "rxjs/no-subscribe-handlers": "warn",
        "rxjs/no-topromise": "error",
        "rxjs/no-unsafe-catch": [
          "error",
          { "observable": "[Aa]ction(s|s\\$|\\$)$" }
        ],
        "rxjs/no-unsafe-first": [
          "error",
          { "observable": "[Aa]ction(s|s\\$|\\$)$" }
        ],
        "rxjs/no-unsafe-switchmap": [
          "error",
          {
            "disallow": [
              "add",
              "ajout",
              "insert",
              "create",
              "delete",
              "suppr",
              "post",
              "put",
              "remove",
              "set",
              "update",
              "maj"
            ],
            "observable": "[Aa]ction(s|s\\$|\\$)$"
          }
        ],
        "rxjs/suffix-subjects": [
          "error",
          {
            "parameters": true,
            "properties": true,
            "suffix": "Subj",
            "types": {
              "^EventEmitter$": false
            },
            "variables": true
          }
        ],
        "rxjs/throw-error": "error",
        "rxjs/prefer-observer": "error",
        "rxjs/no-implicit-any-catch": [
          "warn",
          {
            "allowExplicitAny": true
          }
        ],
        "array-callback-return": [
          "error",
          {
            "allowImplicit": false,
            "checkForEach": true,
            "allowVoid": false
          }
        ],
        "arrow-body-style": [
          "error",
          "as-needed"
        ],
        "class-methods-use-this": [
          "warn",
          {
            "exceptMethods": [
              "transform",
              "trackByFn",
              "trackByLinkFn",
              "trackByActionFn",
              "compareKeyValueActions",
              "trackByTabLinkFn"
            ]
          }
        ],
        "consistent-return": [
          "error",
          {
            "treatUndefinedAsUnspecified": false
          }
        ],
        "curly": "error",
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "eqeqeq": [
          "error",
          "always"
        ],
        "func-names": [
          "error",
          "always"
        ],
        "func-style": [
          "error",
          "declaration",
          {
            "allowArrowFunctions": true
          }
        ],
        "id-length": [
          "error",
          {
            "min": 1,
            "max": 40
          }
        ],
        "object-shorthand": "error",
        "one-var": [
          "error",
          {
            "separateRequires": true,
            "var": "always",
            "let": "never",
            "const": "never"
          }
        ],
        "radix": [
          "error",
          "always"
        ],
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/array-type": [
          "warn",
          {
            "default": "array-simple",
            "readonly": "generic"
          }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/promise-function-async": [
          "error",
          {
            "allowAny": false
          }
        ],
        "@typescript-eslint/return-await": "error",
        "@typescript-eslint/strict-boolean-expressions": [
          "error",
          {
            "allowNumber": false,
            "allowNullableString": true
          }
        ],
        "@stylistic/brace-style": "error",
        "@stylistic/computed-property-spacing": [
          "error",
          "never",
          {
            "enforceForClassMembers": true
          }
        ],
        "@stylistic/key-spacing": [
          "error",
          {
            "mode": "strict"
          }
        ],
        "@stylistic/no-confusing-arrow": "error",
        "@stylistic/no-extra-semi": "error",
        "@stylistic/quotes": [
          "error",
          "single",
          {
            "avoidEscape": true,
            "allowTemplateLiterals": false
          }
        ],
        "@stylistic/quote-props": [
          "error",
          "consistent-as-needed",
          {
            "keywords": true,
            "numbers": true
          }
        ],
        "@stylistic/spaced-comment": [
          "error",
          "always",
          {
            "block": {
              "balanced": true
            }
          }
        ],
        "@stylistic/template-curly-spacing": "error",
        "@stylistic/wrap-iife": [
          "error",
          "outside"
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "plugin:@angular-eslint/template/accessibility"
      ],
      "rules": {
        "@angular-eslint/template/use-track-by-function": "warn"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "excludedFiles": [
        "*inline-template-*.component.html"
      ],
      "extends": [
        "plugin:prettier/recommended"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "parser": "angular"
          }
        ]
      }
    }
  ]
}
